Reverse the apk:
	-> d2j-dex2jar test.apk
	-> use jd-gui to read the code
	-> use IDA pro

	-> unzip the .apk and check the folders and files

	-> on Windows: use jdax-gui

	-> (complete decompiling): ava -jar apktool_2.3.3.jar d <apk>

	Apktool:
	-> apktool d myapp.apk -o extractedFolder

Reverse .ipa file:
	-> https://reverseengineering.stackexchange.com/questions/1594/possibilities-for-reverse-engineering-an-ipa-file-to-its-source	

Dynamical Analyses:
	-> Use Burp to intercept the requests

	-> https://support.portswigger.net/customer/portal/articles/1841101-configuring-an-android-device-to-work-with-burp

	-> Android: https://support.portswigger.net/customer/portal/articles/1841102-Mobile%20Set-up_Android%20Device%20-%20Installing%20CA%20Certificate.html

	-> IOS: https://support.portswigger.net/customer/portal/articles/1841109-installing-burp-s-ca-certificate-in-an-ios-device
	

Bypass SSL pinning:
	-> Android: https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/

	   Configuring Burp Suite With Android Nougat:
		-> https://blog.ropnop.com/configuring-burp-suite-with-android-nougat/

	-> iOS: https://blog.netspi.com/four-ways-to-bypass-ios-ssl-verification-and-certificate-pinning/

		-> objection --gadget "com.XXXXX" explore
		-> ssl-pinning disable (install a self-signed cert before)

		Using Burp's Invisible Proxy Settings to Test a Non-Proxy-Aware Thick Client Application:
		-> https://portswigger.net/support/using-burp-suites-invisible-proxy-settings-to-test-a-non-proxy-aware-thick-client-application

			Disable and flush mDNSResponder on iOS:
				-> launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
				(to relaunch it) -> launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
				-> killall -HUP mDNSResponder; killall -HUP mDNSResponderHelper



Framework:
	-> install frida-tools (https://www.frida.re/docs/installation/)

	-> install frida server https://github.com/frida/frida/releases

Frida Framework:
	Android (rooted):
		-> adb shell getprop ro.product.cpu.abi 
		-> download the correct Frida server: https://github.com/frida/frida/releases 
		-> adb push frida-server-12.2.29-android-arm64 /data/local/tmp/ 
		-> adb shell "chmod 755 /data/local/tmp/frida-server-12.2.29-android-arm64 " 
		-> adb shell 
		-> (on Device) su 
		-> (on Device) /data/local/tmp/frida-server-12.2.29-android-arm64 & 
		-> (on Kali) frida-ps -U

	IoS (JailBroken):
		-> (on Device through ssh) uname -a
		-> download the correct frida server: https://github.com/frida/frida/releases 
		-> (on Kali) scp frida-server-12.2.29-android-arm64 <username>@<ip>:<path to destination> 
		-> (on Device )chmod 755 frida-server-12.2.29-android-arm64 
		-> (on Device) ./frida-server-12.2.29-android-arm64 & 
		-> (on Kali) frida-ps -U
		-> (on Kali) frida-ps -Uai
		-> (on Kali) python3 fridump.py -s -U NameOfApp

MobSF Framework:
	-> git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF
	-> ./setup.sh && ./run.sh
	-> access page: http://localhost:8000
	-> for dynamical analysis use genymotion


Using ADB:
	-> adb devices (check the device)
	-> adb install test.apk (install the .apk on the device)
	-> adb shell	(execute cmd on the device) 
	-> adb uninstall com.company.apppackage  (remove .apk)
	-> adb install <path to apk> 	(install .apk on device)
	-> adb push <myfile> <remote path> (push a file on the device)

	- Get file from rooted phone:
		-> adb -d shell "su -c cat /sbin/.magisk/mirror/data/data/xx.com.xxxapp.xxx/app_webview/Default/databases/file__0/1" > data_android.db


On the Phone/iPad:
	-> get the files concerning the application: grep -rnwi / -e "NameOfApp" > myfile

Scan the App:
	-> MobSF: https://github.com/MobSF/Mobile-Security-Framework-MobSF

Android processor architecture:
	-> ARM
	-> Intel
	-> MIPS

Android:
	-> check the stack smashing protection:
		find . -name "*.so" -exec pwn checksec --file {} \;

iOS default ssh password: alpine

iOS DCIM directory	->	/private/var/mobile/Media/DCIM/

Application path	->		/var/containers/Bundle/Application/


Dynamical Analysis link	-> https://medium.com/@ansjdnakjdnajkd/dynamic-analysis-of-ios-apps-wo-jailbreak-1481ab3020d8

Mobile App Analysis Platform -> https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security

Objection & Frida:
	- Using Frida tools to get the PID of the target app:

		-> frida-ps -ai -H 192.168.99.242:27043   (in case of remote frida server)
		-> frida-ps -Uai      (in case of usb connected frida server)

	- Connect to remote frida server with custom port (pid of app is 1983 here):
		-> objection -N --host 192.168.99.242 --port 27043 -g 1983 explore

		-> frida-ps -ai -H 192.168.99.242:19999   (in case of remote frida server)
		-> frida-ps -Uai      (in case of usb connected frida server)

	- Connect to remote frida server with custom port (pid of app is 1983 here):
		-> objection -N --host 192.168.99.242 --port 19999 -g 1983 explore


	- Objection dumping memory:
		-> memory dump all dump.txt
		-> string dump.txt > strings.txt 

	- Objection runtime injection test:
		-> ios ui alert "injection test"


Logs reading:
	- Android:
		-> adb logcat

	- iOS:
		-> use itools on Windows
